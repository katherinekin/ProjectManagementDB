@model ProjManagement.Models.LoginModelForgot

<style>
    /* Set width on the form input elements since they're 100% wide by default */
    input,
    select,
    textarea {
        max-width: 280px;
    }

    .column {
        float: left;
        width: 50%;
        padding: 25px;
        text-align: center;
        font-size: 25px;
        cursor: pointer;
        color: white;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>

<div class="row">
    <div class="column" onclick="openTab2('username');" , style="background:gray;" id="usernameBOX">Forgot Username</div>
    <div class="column" onclick="openTab2('password');" , style="background:gray;" id="passwordBOX">Forgot Password</div>
</div>

<div id="username" class="hideable2" style="display:none">
    @using (Html.BeginForm("Update", "Login", FormMethod.Post, new { name = "forgotusernameform", id = "form2" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Enter your information</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NewUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewUsername, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NewUsername, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmUsername, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmUsername, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control", id = "newpass", onkeyup = "syncP()" } })
                    @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ConfirmPass, new { @class = "form-control", id = "confirmpass" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="submit" name="forgot" form="form2" value="user">Submit</button>
                </div>
            </div>
        </div>
    }
    @{Html.EndForm();}
</div>

<div id="password" class="hideable2" style="display:none">
    @using (Html.BeginForm("Update", "Login", FormMethod.Post, new { name = "forgotpasswordform", id = "form3" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Enter your information</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EmployeeID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NewUsername, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewUsername, new { htmlAttributes = new { @class = "form-control", id = "newusername", onkeyup = "syncU()" } })
                    @Html.ValidationMessageFor(model => model.NewUsername, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ConfirmUsername, new { @class = "form-control", id = "confirmusername" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPass, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmPass, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPass, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="submit" name="forgot" form="form3" value="pass">Submit</button>
                </div>
            </div>
        </div>
    }
    @{Html.EndForm();}
</div>

